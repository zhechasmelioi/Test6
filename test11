dependencies {
    implementation 'com.google.android.gms:play-services-mlkit-speech-recognition:17.0.0'
}

import android.content.Intent;
import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.RecognizerIntent;
import android.speech.SpeechRecognizer;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.mlkit.common.model.RemoteModelManager;
import com.google.mlkit.common.model.RemoteModelSource;
import com.google.mlkit.common.model.RemoteModelUpdateChecker;
import com.google.mlkit.nl.languageid.LanguageIdentification;
import java.util.ArrayList;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private SpeechRecognizer speechRecognizer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize SpeechRecognizer
        speechRecognizer = SpeechRecognizer.createSpeechRecognizer(this);
        speechRecognizer.setRecognitionListener(new MyRecognitionListener());

        // Start listening for voice commands
        startListening();

        // Check and download the language identification model (optional)
        checkAndDownloadLanguageModel();
    }

    private void checkAndDownloadLanguageModel() {
        RemoteModelManager remoteModelManager = RemoteModelManager.getInstance();
        RemoteModelSource remoteModelSource = new RemoteModelSource.Builder("language_id")
                .build();

        remoteModelManager.isModelDownloaded(remoteModelSource)
                .addOnSuccessListener(new OnSuccessListener<Boolean>() {
                    @Override
                    public void onSuccess(Boolean isDownloaded) {
                        if (!isDownloaded) {
                            remoteModelManager.download(remoteModelSource)
                                    .addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void aVoid) {
                                            // Language model downloaded successfully
                                        }
                                    })
                                    .addOnFailureListener(new OnFailureListener() {
                                        @Override
                                        public void onFailure(Exception e) {
                                            // Failed to download language model
                                        }
                                    });
                        }
                    }
                });
    }

    private void startListening() {
        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        speechRecognizer.startListening(intent);
    }

    private class MyRecognitionListener implements RecognitionListener {
        @Override
        public void onReadyForSpeech(Bundle params) {}

        @Override
        public void onBeginningOfSpeech() {}

        @Override
        public void onRmsChanged(float rmsdB) {}

        @Override
        public void onBufferReceived(byte[] buffer) {}

        @Override
        public void onEndOfSpeech() {}

        @Override
        public void onError(int error) {
            // Handle speech recognition errors
            Toast.makeText(MainActivity.this, "Error: " + error, Toast.LENGTH_SHORT).show();
            startListening(); // Restart listening after error
        }

        @Override
        public void onResults(Bundle results) {
            ArrayList<String> matches = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
            if (matches != null && !matches.isEmpty()) {
                String command = matches.get(0).toLowerCase(Locale.getDefault());
                if (command.contains("open settings")) {
                    openSettingsActivity();
                } else {
                    // Handle unrecognized commands
                    Toast.makeText(MainActivity.this, "Command not recognized", Toast.LENGTH_SHORT).show();
                }
            }
            startListening(); // Restart listening after results
        }

        @Override
        public void onPartialResults(Bundle partialResults) {}

        @Override
        public void onEvent(int eventType, Bundle params) {}
    }

    private void openSettingsActivity() {
        Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
        startActivity(intent);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (speechRecognizer != null) {
            speechRecognizer.destroy();
        }
    }
}

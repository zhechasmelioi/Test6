dependencies {
    implementation 'edu.cmu.pocketsphinx:pocketsphinx-android:5prealpha-SNAPSHOT'
}


import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import edu.cmu.pocketsphinx.Assets;
import edu.cmu.pocketsphinx.Hypothesis;
import edu.cmu.pocketsphinx.RecognitionListener;
import edu.cmu.pocketsphinx.SpeechRecognizer;
import edu.cmu.pocketsphinx.SpeechRecognizerSetup;
import java.io.File;
import java.io.IOException;

public class MainActivity extends AppCompatActivity implements RecognitionListener {

    private static final int PERMISSION_REQUEST_RECORD_AUDIO = 1;
    private SpeechRecognizer recognizer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Check for RECORD_AUDIO permission
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.RECORD_AUDIO},
                    PERMISSION_REQUEST_RECORD_AUDIO);
        } else {
            setupRecognizer();
        }
    }

    private void setupRecognizer() {
        try {
            // Setup PocketSphinx
            Assets assets = new Assets(MainActivity.this);
            File assetDir = assets.syncAssets();
            recognizer = SpeechRecognizerSetup.defaultSetup()
                    .setAcousticModel(new File(assetDir, "en-us-ptm"))
                    .setDictionary(new File(assetDir, "cmudict-en-us.dict"))
                    .getRecognizer();
            recognizer.addListener(this);

            // Create keyword-activation search
            recognizer.addKeyphraseSearch("startListening", "start listening");

            // Start listening for the keyword
            recognizer.startListening("startListening");
        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(this, "Failed to initialize recognition", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_RECORD_AUDIO) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                setupRecognizer();
            } else {
                Toast.makeText(this, "Permission denied to record audio", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    public void onBeginningOfSpeech() {
        // Not used in keyword spotting
    }

    @Override
    public void onEndOfSpeech() {
        // Not used in keyword spotting
    }

    @Override
    public void onPartialResult(Hypothesis hypothesis) {
        // Handle partial recognition results
        if (hypothesis != null) {
            String text = hypothesis.getHypstr();
            if (text.equals("start listening")) {
                // Start your full speech recognition process here
                startListening(); // Example method to start full recognition
            }
        }
    }

    @Override
    public void onResult(Hypothesis hypothesis) {
        // Not used in keyword spotting
    }

    @Override
    public void onError(Exception e) {
        // Handle recognition errors
        Toast.makeText(this, "Recognition error", Toast.LENGTH_SHORT).show();
        recognizer.cancel();
        setupRecognizer();
    }

    @Override
    public void onTimeout() {
        // Not used in keyword spotting
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (recognizer != null) {
            recognizer.cancel();
            recognizer.shutdown();
        }
    }

    // Method to start full speech recognition after the trigger phrase is detected
    private void startListening() {
        // Implement your full speech recognition logic here
        Toast.makeText(this, "Starting full speech recognition", Toast.LENGTH_SHORT).show();
    }
}
